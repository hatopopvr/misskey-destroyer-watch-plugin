/// @ 0.13.3
### {
  name: "通知からリアクション等を一覧で表示するプラグイン",
  version: "0.3.0",
  author: "はとぽぷ",
  description: "直近最大300件前後の通知のリアクションとリノートを取得",
  permissions: ["read:notifications"],
  config: {
    notificationLimit: {
        type: "number",
        label: "1回のリクエストで取得する通知の最大数",
        description: "一度のAPIリクエストで取得できる通知の数。APIの制限により、最大値は100までです。",
        default: 100
    },
    requestMaxCount: {
        type: "number",
        label: "APIリクエストの最大試行回数",
        description: "APIに対するリクエストの最大試行回数。この回数に達した時点で、または結果が0の場合に処理が終了します。",
        default: 4
    },
    usernameSuffixText: {
      type: "string",
      label: "ユーザー名の語尾につけるテキスト",
      default: ""
    },
    reactionIsEnable: {
      type: "boolean",
      label: "リアクションを取得する",
      default: true
    },
    renoteIsEnable: {
      type: "boolean",
      label: "リノートを取得する",
      description: "引用リノートは含みません。",
      default: true
    },
    linkIsEnable: {
      type: "boolean",
      label: "リアクションやリノートに元ノートのリンクを付与",
      default: true
    },
    reactionReverse: {
      type: "boolean",
      label: "リアクションの表示順を反転",
      default: true
    },
    dialogReactionVisible: {
      type: "boolean",
      label: "ダイアログのリアクション詳細表示",
      default: true
    },
    dialogReactionCountVisible: {
      type: "boolean",
      label: "ダイアログのリアクション数表示",
      default: true
    },
    dialogDestroyerLimit: {
      type: "number",
      label: "ダイアログの最大ユーザー数",
      default: 20
    },
    dialogReactionMin: {
      type: "number",
      label: "ダイアログに表示する最低リアクション数",
      default: 1
    },
    dialogHeaderText: {
      type: "string",
      label: "ダイアログのヘッダーテキスト",
      default: ""
    },
    dialogUserPrefixText: {
      type: "string",
      label: "ダイアログのユーザー接頭辞テキスト",
      default: ""
    },
    dialogReactionSeparator: {
      type: "string",
      label: "ダイアログのReaction間セパレータ",
      default: ""
    },
    resultReactionVisible: {
      type: "boolean",
      label: "投稿用テキストのリアクション詳細表示",
      default: true
    },
    resultReactionCountVisible: {
      type: "boolean",
      label: "投稿用テキストのリアクション数表示",
      default: true
    },
    resultDestroyerLimit: {
      type: "number",
      label: "投稿用テキストの最大ユーザー数",
      default: 1
    },
    resultReactionMin: {
      type: "number",
      label: "投稿用テキストに表示する最低リアクション数",
      default: 1
    },
    resultHeaderText: {
      type: "string",
      label: "投稿用テキストのヘッダーテキスト",
      default: ""
    },
    resultUserSuffixText: {
      type: "string",
      label: "投稿用テキストのユーザー末尾テキスト",
      default: ""
    },
    resultReactionSeparator: {
      type: "string",
      label: "投稿用テキストでのReaction間セパレータ",
      default: ""
    },
    resultFooterTagText: {
      type: "string",
      label: "投稿用テキストのフッターに追加するタグテキスト",
      default: "#MisskeyDestroyerWatch"
    },
    resultTextMaxLength: {
      type: "number",
      label: "投稿用テキストの最大長",
      description: "投稿用テキストで表示する最大文字数を設定します。",
      default: 2800
    },
    resultReactionMaxLength: {
      type: "number",
      label: "投稿用リアクション一覧の最大長",
      description: "投稿用テキストのユーザーのリアクション一覧の最大文字数を設定します。",
      default: 2500
    },
    resultOverflowText: {
      type: "string",
      label: "長文超過時の省略テキスト",
      description: "表示するテキストが設定された最大長を超えた場合に表示されるテキストを設定します。",
      default: "<small><small>...(一部省略)</small></small>"
    },
    excludedReactions: {
      type: "string",
      label: "除外するリアクション",
      description: "表示しないリアクションのワードをカンマ区切りで入力します。例：':ohayoo:,:oyasumisskey:'",
      default: ""
    }
  }
}

// SeverNameの取得
let SERVER_NAME = Mk:url().split('/')[2]

// configに値がない場合デフォルト値を取得
@getConfigValue(configValue, defaultValue) {
    if (configValue != null) {
        configValue
    } else {
        defaultValue
    }
}

// APIからの通知を取得
@getNotifications(limit, requestMaxCount) {
    let resultList = []
    var result = Mk:api("i/notifications", {limit: limit})

    each (let res result){
        resultList.push(res)
    }

    var until_id = result[result.len - 1].id
    var count = 1

    loop {
        if count == requestMaxCount break

        var payload = {limit: limit, untilId: until_id}
        result = Mk:api("i/notifications", payload)
        if (result.len == 0) break

        each (let res result){
            resultList.push(res)
        }

        until_id = result[result.len - 1].id
        count = count + 1
    }

    resultList
}


// ユーザーとリアクションを集計
@aggregateUserReactions(notifications, config) {
    // ユーザーとリアクションを保存するためのオブジェクト
    let userReactionCount = {}
    let userIdList = []

    each (let notif notifications) {
        // リアクションを取得
        if (config.reactionIsEnable == true && notif.type == 'reaction') {
            let userId = notif.user.id
            let userName = notif.user.name
            let noteId = notif.note.id
            var reaction = `{notif.reaction}`

            // userのリストの追加
            if (!userIdList.incl(userId)) {
                userIdList.push(userId)
            }

            // userReactionCountにuserIdがなければ初期化
            if (Obj:has(userReactionCount, userId) == false) {
                Obj:set(userReactionCount, userId, { user: notif.user, reactions: [] })
            }

            //リアクションを取得
            if (config.linkIsEnable == true) {
                reaction = `?[{notif.reaction}](https://{SERVER_NAME}/notes/{noteId})`
            }

            let userReactions = Obj:get(Obj:get(userReactionCount, userId), 'reactions')

            // リアクションをユーザーに追加
            userReactions.push(reaction)
        }

        // リノートを取得
        if (config.renoteIsEnable == true && notif.type == 'renote') {
            let userId = notif.user.id
            let userName = notif.user.name
            let noteId = notif.note.id
            var reaction = `:rn:`

            // userのリストの追加
            if (!userIdList.incl(userId)) {
                userIdList.push(userId)
            }

            // userReactionCountにuserIdがなければ初期化
            if (Obj:has(userReactionCount, userId) == false) {
                Obj:set(userReactionCount, userId, { user: notif.user, reactions: [] })
            }

            //リノートを取得
            if (config.linkIsEnable == true) {
                reaction = `?[:rn:](https://{SERVER_NAME}/notes/{noteId})`
            }

            let userReactions = Obj:get(Obj:get(userReactionCount, userId), 'reactions')

            // リアクションをユーザーに追加
            userReactions.push(reaction)
        }
    }

    // countListに各リアクション数の追加
    let countList = []
    each (let userId userIdList){
        let userReactions = Obj:get(Obj:get(userReactionCount, userId), 'reactions')
        countList.push(userReactions.len)
    }

    let resultObj = {}
    Obj:set(resultObj, "userReactionCount", userReactionCount)
    Obj:set(resultObj, "userIdList", userIdList)
    Obj:set(resultObj, "countList", countList)
    resultObj
}

// indexに基づいてソート
@sortByIndices(sortedIndices, targetList) {
    let sortedList = []
    each (let i sortedIndices) {
        sortedList.push(targetList[i])
    }
    sortedList
}

// ソート処理
@sortUsersByReaction(userIdList, countList) {
    let sortedIndices = []
    for (let i, countList.len) {
        sortedIndices.push(i)
    }

    sortedIndices.sort(@(a, b) {
        return countList[b] - countList[a]
    })

    let sortedUserIdList = sortByIndices(sortedIndices, userIdList)
    let sortedCountList = sortByIndices(sortedIndices, countList)

    let sortedObj = {}
    Obj:set(sortedObj, "sortedUserIdList", sortedUserIdList)
    Obj:set(sortedObj, "sortedCountList", sortedCountList)
    sortedObj
}

// 半角/全角の空白を除去
@removeWhitespace(originalText) {
    var newText = originalText.replace(" ","")
    newText = newText.replace("　", "")
    return newText
}

// 除外するリアクションを除去
@filterReactions(userReactions, excludedReactions, config) {
    let filteredReactions = []
    each (let reaction userReactions) {
        var exclude = false
        if (excludedReactions.join("").len > 0) {
            each (let exReaction excludedReactions) {
                let exReactionNew = removeWhitespace(exReaction)
                if exReactionNew.len == 0 break
                if ((reaction).incl(exReactionNew)) {
                    exclude = true
                    break
                }
            }
        }
        if (!exclude) {
            var filteredReactionsText = filteredReactions.join(config.resultReactionSeparator)
            if (config.resultReactionMaxLength > filteredReactionsText.len) {
                filteredReactions.push(reaction)
            }
            else {
                filteredReactions.push(config.resultOverflowText)
                break
            }
        }
    }
    return filteredReactions
}

// ダイアログと投稿用テキストの作成
@createUserTextLists(sortedUserIdList, userReactionCount, overrideResultText, config) {
    // -----------------------------------------------------------------
    var resultText = "通知破壊などありません"
    // 注記。
    var dialogCautionText = "<center><small>※このプラグインは直近最大300件前後の通知を取得するものです。ユーザーのページへの遷移はユーザー名右クリックで新しいタブを開くなどで飛んでください。</small></center>"
    // -----------------------------------------------------------------
    // 除外するリアクションを配列に変換
    let excludedReactionsArray = config.excludedReactions.split(",")

    // ダイアログと投稿用テキストの作成
    let dialogTextList = []
    let resultTextList = []
    var destroyerCount = 0
    dialogTextList.push(config.dialogHeaderText)
    dialogTextList.push(dialogCautionText)
    resultTextList.push(config.resultHeaderText)

    each (let userId sortedUserIdList){
        let user = Obj:get(Obj:get(userReactionCount, userId), 'user')
        let userReactions = Obj:get(Obj:get(userReactionCount, userId), 'reactions')
        let userHost = user.host

        if (config.reactionReverse == true) {
            userReactions.reverse()
        }

        var dialogReactionCountText = userReactions.len
        if (config.dialogReactionCountVisible == false) {
            dialogReactionCountText = ""
        }

        var resultReactionCountText = userReactions.len
        if (config.resultReactionCountVisible == false) {
            resultReactionCountText = ""
        }

        if (config.dialogDestroyerLimit > destroyerCount && userReactions.len >= config.dialogReactionMin) {
            let dialogUserReactions = userReactions.join(`{config.dialogReactionSeparator}`)
            if (config.dialogReactionVisible == false) {
                dialogUserReactions = ""
            }
            if (userHost == null) {
                dialogTextList.push(`{config.dialogUserPrefixText}@{user.username}{config.usernameSuffixText}: {dialogReactionCountText} {dialogUserReactions}`)
            } else {
                dialogTextList.push(`{config.dialogUserPrefixText}@{user.username}@{userHost}{config.usernameSuffixText}: {dialogReactionCountText} {dialogUserReactions}`)
            }

        }
        if (config.resultDestroyerLimit > destroyerCount && userReactions.len >= config.dialogReactionMin) {
            // リアクションから除外するリアクションを除去
            let filteredUserReactions = filterReactions(userReactions, excludedReactionsArray, config)

            let resultUserReactions = filteredUserReactions.join(`{config.resultReactionSeparator}`)
            if (config.resultReactionVisible == false) {
                resultUserReactions = ""
            }

            if (userHost == null) {
                resultTextList.push(`@{user.username}{config.usernameSuffixText}: {resultReactionCountText} {config.resultUserSuffixText}{Str:lf}{resultUserReactions}{Str:lf}`)
            } else {
                resultTextList.push(`@{user.username}@{userHost}{config.usernameSuffixText}: {resultReactionCountText} {config.resultUserSuffixText}{Str:lf}{resultUserReactions}{Str:lf}`)
            }
        }
        destroyerCount = destroyerCount + 1
    }

    // 結合
    var resultTextMerged = resultTextList.join(Str:lf)
    if (resultTextMerged.len > config.resultTextMaxLength) {
        resultTextMerged = resultTextMerged.slice(0, config.resultTextMaxLength)
        resultTextMerged = `{resultTextMerged}{config.resultOverflowText}`
    }

    // 最終的なダイアログテキスト
    let dialogText = dialogTextList.join(Str:lf)
    if (overrideResultText == true) {
        // タグ付与
        resultText = `{resultTextMerged}{Str:lf}{config.resultFooterTagText}`
    } else {
        resultText = overrideResultText
    }
    let resultTextObj = {}
    Obj:set(resultTextObj, "dialogText", dialogText)
    Obj:set(resultTextObj, "resultText", resultText)
    resultTextObj
}

// メイン処理
@misskeyDestroyerWatch(overrideResultText) {
    // 設定を取得
    let config = Plugin:config
    // 通知の取得数です。APIの制限により現在は最大100です。
    var notificationLimit = getConfigValue(config.notificationLimit, 100)
    // Misskey APIから通知の取得
    let notifications = getNotifications(notificationLimit, config.requestMaxCount)

    // ユーザーとリアクションを保存するためのオブジェクト
    let userReactionObj = aggregateUserReactions(notifications, config)
    let userReactionCount = Obj:get(userReactionObj, "userReactionCount")
    let userIdList = Obj:get(userReactionObj, "userIdList")
    let countList = Obj:get(userReactionObj, "countList")

    // リアクション数順にソートしたオブジェクト
    let sortedObj = sortUsersByReaction(userIdList, countList)
    let sortedUserIdList = Obj:get(sortedObj, "sortedUserIdList")

    // ダイアログと投稿用テキストの作成
    let resultTextObj = createUserTextLists(sortedUserIdList, userReactionCount, overrideResultText, config)
    let dialogText = Obj:get(resultTextObj, "dialogText")
    let resultText = Obj:get(resultTextObj, "resultText")

    // ダイアログに表示
    Mk:dialog(null dialogText)
resultText}

Plugin:register_post_form_action(`[投稿]直近の通知を取得！` @(f u) {u("text" misskeyDestroyerWatch(true))})
Plugin:register_post_form_action(`[閲覧]直近の通知を取得！` @(f u) {u("text" misskeyDestroyerWatch(f.text))})